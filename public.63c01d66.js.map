{"mappings":"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","sources":["<anon>","src/js/main.js","src/js/modules/domElements.js","src/js/modules/state.js","src/js/modules/quizLogic.js","src/js/modules/timer.js","src/js/modules/uiHandlers.js","src/js/modules/fileLoader.js"],"sourcesContent":["// src/js/main.js\n// src/js/modules/domElements.js\n// DOM Elements - Welcome Screen\nconst $4726fc9743f213d4$export$bb2b5c3157a19234 = document.getElementById('welcomeScreen');\nconsole.log('DOM Element Check: welcomeScreen', $4726fc9743f213d4$export$bb2b5c3157a19234); // ADD THIS\nconst $4726fc9743f213d4$export$206da73a9838ae1a = document.getElementById('startQuizBtn');\nconsole.log('DOM Element Check: startQuizBtn', $4726fc9743f213d4$export$206da73a9838ae1a); // ADD THIS\nconst $4726fc9743f213d4$export$6920059b56c9711d = document.getElementById('addQuestionsBtn');\nconsole.log('DOM Element Check: addQuestionsBtn', $4726fc9743f213d4$export$6920059b56c9711d); // ADD THIS\nconst $4726fc9743f213d4$export$962e2c1b7a3462a6 = document.getElementById('quizMode');\nconsole.log('DOM Element Check: quizModeSelect', $4726fc9743f213d4$export$962e2c1b7a3462a6); // ADD THIS\nconst $4726fc9743f213d4$export$d5eb3f5d7317a5f8 = document.getElementById('numQuestions');\nconsole.log('DOM Element Check: numQuestionsInput', $4726fc9743f213d4$export$d5eb3f5d7317a5f8); // ADD THIS\nconst $4726fc9743f213d4$export$4701202506fd12c6 = document.getElementById('maxQuestions');\nconsole.log('DOM Element Check: maxQuestionsSpan', $4726fc9743f213d4$export$4701202506fd12c6); // ADD THIS\nconst $4726fc9743f213d4$export$487c258504e4e2b3 = document.getElementById('timeLimitGroup');\nconsole.log('DOM Element Check: timeLimitGroup', $4726fc9743f213d4$export$487c258504e4e2b3); // ADD THIS\nconst $4726fc9743f213d4$export$517db2e1af273fe5 = document.getElementById('timeLimit');\nconsole.log('DOM Element Check: timeLimitInput', $4726fc9743f213d4$export$517db2e1af273fe5); // ADD THIS\nconst $4726fc9743f213d4$export$6350272b1e0b7e8 = document.getElementById('quizLayout');\nconsole.log('DOM Element Check: quizLayout', $4726fc9743f213d4$export$6350272b1e0b7e8); // ADD THIS\nconst $4726fc9743f213d4$export$dc5d33deea2d41fc = document.getElementById('testContainer');\nconsole.log('DOM Element Check: testContainer', $4726fc9743f213d4$export$dc5d33deea2d41fc); // ADD THIS\nconst $4726fc9743f213d4$export$c3907549ffb20170 = document.getElementById('results');\nconsole.log('DOM Element Check: resultsDiv', $4726fc9743f213d4$export$c3907549ffb20170); // ADD THIS\nconst $4726fc9743f213d4$export$23eeced1ba2691b2 = document.getElementById('timer');\nconsole.log('DOM Element Check: timerDisplay', $4726fc9743f213d4$export$23eeced1ba2691b2); // ADD THIS\nconst $4726fc9743f213d4$export$61b4ad7c9593758b = document.getElementById('prevQuestionBtn');\nconsole.log('DOM Element Check: prevQuestionBtn', $4726fc9743f213d4$export$61b4ad7c9593758b); // ADD THIS\nconst $4726fc9743f213d4$export$a67709db11dc4b08 = document.getElementById('nextQuestionBtn');\nconsole.log('DOM Element Check: nextQuestionBtn', $4726fc9743f213d4$export$a67709db11dc4b08); // ADD THIS\nconst $4726fc9743f213d4$export$ef23df4d66ada1f1 = document.getElementById('resetQuizBtn');\nconsole.log('DOM Element Check: resetQuizBtn', $4726fc9743f213d4$export$ef23df4d66ada1f1); // ADD THIS\nconst $4726fc9743f213d4$export$dae6e8b640030aff = document.getElementById('questionNavPanel');\nconsole.log('DOM Element Check: questionNavPanel', $4726fc9743f213d4$export$dae6e8b640030aff); // ADD THIS\nconst $4726fc9743f213d4$export$7cc3138f4d166b2 = document.getElementById('questionBoxes');\nconsole.log('DOM Element Check: questionBoxesContainer', $4726fc9743f213d4$export$7cc3138f4d166b2); // ADD THIS\nconst $4726fc9743f213d4$export$b96001d3bd7fd97 = document.querySelector('main');\nconsole.log('DOM Element Check: mainElement', $4726fc9743f213d4$export$b96001d3bd7fd97); // ADD THIS\n\n\n// src/js/modules/state.js\nlet $b7c90650b3f126e0$export$2deac3956661e672 = []; // Global variable to store questions loaded from JSON\nlet $b7c90650b3f126e0$export$8a935dfb0d834401 = 'practice'; // 'practice' or 'exam'\nlet $b7c90650b3f126e0$export$8999afcfe917b6ff = 10;\nlet $b7c90650b3f126e0$export$d407372d96b56e5 = 30; // Only for exam mode\nlet $b7c90650b3f126e0$export$af5d38c6bf20bdba = 0; // Track the currently displayed question\nlet $b7c90650b3f126e0$export$7cafe8229f22dfd7 = [];\nlet $b7c90650b3f126e0$export$7931cf9ae0965376 = {}; // Store answers for all questions (key: question.id, value: selectedOptionValue or null)\nlet $b7c90650b3f126e0$export$adfca638bebe93b2;\nlet $b7c90650b3f126e0$export$829e2e869638b7b7;\nlet $b7c90650b3f126e0$export$1406d28fb2a7f1d3 = false; // Flag to check if quiz has been submitted/ended\nfunction $b7c90650b3f126e0$export$1ed55773ccdb58a(newQuestions) {\n    $b7c90650b3f126e0$export$2deac3956661e672 = newQuestions;\n}\nfunction $b7c90650b3f126e0$export$3f2e9886f0e14798(mode) {\n    $b7c90650b3f126e0$export$8a935dfb0d834401 = mode;\n}\nfunction $b7c90650b3f126e0$export$839f113108c3f006(num) {\n    $b7c90650b3f126e0$export$8999afcfe917b6ff = num;\n}\nfunction $b7c90650b3f126e0$export$fd4363b958afab88(minutes) {\n    $b7c90650b3f126e0$export$d407372d96b56e5 = minutes;\n}\nfunction $b7c90650b3f126e0$export$28d43dc27a91af2f(index) {\n    $b7c90650b3f126e0$export$af5d38c6bf20bdba = index;\n}\nfunction $b7c90650b3f126e0$export$7558b63df0f7b9dc(shuffled) {\n    $b7c90650b3f126e0$export$7cafe8229f22dfd7 = shuffled;\n}\nfunction $b7c90650b3f126e0$export$bde75845a73f4019(answers) {\n    $b7c90650b3f126e0$export$7931cf9ae0965376 = answers;\n}\nfunction $b7c90650b3f126e0$export$6da5647c08341c42(questionId, answer) {\n    $b7c90650b3f126e0$export$7931cf9ae0965376[questionId] = answer;\n}\nfunction $b7c90650b3f126e0$export$7eb8b34162b430a8(ended) {\n    $b7c90650b3f126e0$export$1406d28fb2a7f1d3 = ended;\n}\nfunction $b7c90650b3f126e0$export$e2a1360f3ed8f4bf(time) {\n    $b7c90650b3f126e0$export$adfca638bebe93b2 = time;\n}\nfunction $b7c90650b3f126e0$export$52472bdb66d0fb31(interval) {\n    $b7c90650b3f126e0$export$829e2e869638b7b7 = interval;\n}\nfunction $b7c90650b3f126e0$export$403fa10551c12246() {\n    return $b7c90650b3f126e0$export$adfca638bebe93b2;\n}\nfunction $b7c90650b3f126e0$export$5fd11e9fcd6545af() {\n    return $b7c90650b3f126e0$export$829e2e869638b7b7;\n}\n\n\n// src/js/modules/quizLogic.js\n\n\n// src/js/modules/timer.js\n\n\n// REMOVE THIS LINE: import { checkAnswers } from './quizLogic.js';\n/**\r\n * Formats a total number of seconds into a MM:SS string.\r\n * @param {number} totalSeconds - The total number of seconds.\r\n * @returns {string} Formatted time string (MM:SS).\r\n */ function $23f5314cb83d0665$var$formatTime(totalSeconds) {\n    if (totalSeconds < 0) totalSeconds = 0;\n    const minutes = Math.floor(totalSeconds / 60).toString().padStart(2, '0');\n    const seconds = (totalSeconds % 60).toString().padStart(2, '0');\n    return `Time: ${minutes}:${seconds}`;\n}\n/**\r\n * Updates the timer display for practice mode (counts up).\r\n */ function $23f5314cb83d0665$var$updatePracticeTimer() {\n    const now = new Date();\n    const elapsed = new Date(now - (0, $b7c90650b3f126e0$export$403fa10551c12246)());\n    const minutes = elapsed.getMinutes().toString().padStart(2, '0');\n    const seconds = elapsed.getSeconds().toString().padStart(2, '0');\n    (0, $4726fc9743f213d4$export$23eeced1ba2691b2).textContent = `Time: ${minutes}:${seconds}`;\n}\nfunction $23f5314cb83d0665$export$5985f5b4428bec55(limitSeconds = 0, checkAnswersCallback) {\n    clearInterval((0, $b7c90650b3f126e0$export$5fd11e9fcd6545af)()); // Clear any existing timer\n    if (limitSeconds > 0) {\n        let remainingSeconds = limitSeconds;\n        (0, $4726fc9743f213d4$export$23eeced1ba2691b2).textContent = $23f5314cb83d0665$var$formatTime(remainingSeconds);\n        const interval = setInterval(()=>{\n            remainingSeconds--;\n            (0, $4726fc9743f213d4$export$23eeced1ba2691b2).textContent = $23f5314cb83d0665$var$formatTime(remainingSeconds);\n            if (remainingSeconds <= 0) {\n                clearInterval((0, $b7c90650b3f126e0$export$5fd11e9fcd6545af)());\n                alert(\"Time's up! Submitting your answers.\");\n                if (checkAnswersCallback) checkAnswersCallback();\n            }\n        }, 1000);\n        (0, $b7c90650b3f126e0$export$52472bdb66d0fb31)(interval);\n    } else {\n        (0, $b7c90650b3f126e0$export$e2a1360f3ed8f4bf)(new Date());\n        (0, $4726fc9743f213d4$export$23eeced1ba2691b2).textContent = 'Time: 00:00';\n        const interval = setInterval($23f5314cb83d0665$var$updatePracticeTimer, 1000);\n        (0, $b7c90650b3f126e0$export$52472bdb66d0fb31)(interval);\n    }\n}\nfunction $23f5314cb83d0665$export$4d41f7386211339a() {\n    clearInterval((0, $b7c90650b3f126e0$export$5fd11e9fcd6545af)());\n    (0, $b7c90650b3f126e0$export$52472bdb66d0fb31)(null); // Clear the interval ID\n}\n\n\n// src/js/modules/uiHandlers.js\n\n\nfunction $859539450d12e8ee$export$578c9bc0c99a8ff(displayQuestionCallback, checkAnswersCallback) {\n    // Show/hide previous button based on current question index\n    if ((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba) === 0) (0, $4726fc9743f213d4$export$61b4ad7c9593758b).classList.add('hidden');\n    else (0, $4726fc9743f213d4$export$61b4ad7c9593758b).classList.remove('hidden');\n    // Determine text and visibility of next/submit button\n    if (0, $b7c90650b3f126e0$export$1406d28fb2a7f1d3) {\n        // If quiz has ended, all questions are for review\n        (0, $4726fc9743f213d4$export$61b4ad7c9593758b).disabled = false;\n        (0, $4726fc9743f213d4$export$a67709db11dc4b08).disabled = false;\n        (0, $4726fc9743f213d4$export$a67709db11dc4b08).textContent = 'Review Next \\u2192';\n        (0, $4726fc9743f213d4$export$61b4ad7c9593758b).textContent = '\\u2190 Review Previous';\n        (0, $4726fc9743f213d4$export$a67709db11dc4b08).classList.remove('hidden'); // Ensure it's visible for review\n        (0, $4726fc9743f213d4$export$61b4ad7c9593758b).classList.remove('hidden'); // Ensure it's visible for review\n        // Hide navigation buttons if only one question or at the ends of review\n        if ((0, $b7c90650b3f126e0$export$7cafe8229f22dfd7).length === 1) {\n            (0, $4726fc9743f213d4$export$61b4ad7c9593758b).classList.add('hidden');\n            (0, $4726fc9743f213d4$export$a67709db11dc4b08).classList.add('hidden');\n        } else if ((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba) === (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7).length - 1) (0, $4726fc9743f213d4$export$a67709db11dc4b08).classList.add('hidden'); // Hide 'next' if at last question in review\n        else if ((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba) === 0) (0, $4726fc9743f213d4$export$61b4ad7c9593758b).classList.add('hidden'); // Hide 'previous' if at first question in review\n        (0, $4726fc9743f213d4$export$ef23df4d66ada1f1).classList.remove('hidden'); // Always show reset button after quiz ends\n    } else {\n        // If quiz is ongoing\n        (0, $4726fc9743f213d4$export$a67709db11dc4b08).classList.remove('hidden'); // Ensure it's visible for an active quiz\n        (0, $4726fc9743f213d4$export$61b4ad7c9593758b).classList.remove('hidden'); // Ensure it's visible for an active quiz\n        if ((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba) === (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7).length - 1) (0, $4726fc9743f213d4$export$a67709db11dc4b08).textContent = 'Submit Answers';\n        else (0, $4726fc9743f213d4$export$a67709db11dc4b08).textContent = 'Next \\u2192';\n        (0, $4726fc9743f213d4$export$61b4ad7c9593758b).textContent = '\\u2190 Previous';\n        (0, $4726fc9743f213d4$export$ef23df4d66ada1f1).classList.add('hidden'); // Hide reset button during quiz\n    }\n}\nfunction $859539450d12e8ee$export$812bab9188b62cb9(displayQuestionCallback, updateQuestionBoxStatusCallback, updateNavigationButtonsCallback) {\n    (0, $4726fc9743f213d4$export$7cc3138f4d166b2).innerHTML = ''; // Clear previous boxes\n    (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7).forEach((q, index)=>{\n        const questionBox = document.createElement('div');\n        questionBox.classList.add('question-box');\n        questionBox.textContent = index + 1; // Display 1-based index\n        questionBox.dataset.index = index; // Store 0-based index for easy access\n        // Set initial answered/not-answered status\n        if ((0, $b7c90650b3f126e0$export$7931cf9ae0965376)[q.id] === null) questionBox.classList.add('not-answered');\n        else questionBox.classList.add('answered');\n        // Add click listener for direct question navigation\n        questionBox.addEventListener('click', (event)=>{\n            const clickedIndex = parseInt(event.target.dataset.index);\n            if (clickedIndex !== (0, $b7c90650b3f126e0$export$af5d38c6bf20bdba)) {\n                // If quiz is ongoing, update status of the *previous* current question\n                if (!(0, $b7c90650b3f126e0$export$1406d28fb2a7f1d3)) updateQuestionBoxStatusCallback((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba));\n                (0, $b7c90650b3f126e0$export$28d43dc27a91af2f)(clickedIndex);\n                displayQuestionCallback((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba));\n                updateNavigationButtonsCallback();\n            }\n        });\n        (0, $4726fc9743f213d4$export$7cc3138f4d166b2).appendChild(questionBox);\n    });\n    $859539450d12e8ee$export$17a82b04f64e1546((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba)); // Highlight the first question initially\n}\nfunction $859539450d12e8ee$export$17a82b04f64e1546(newIndex) {\n    // Remove 'current' class from all boxes\n    Array.from((0, $4726fc9743f213d4$export$7cc3138f4d166b2).children).forEach((box)=>{\n        box.classList.remove('current');\n    });\n    // Add 'current' class to the new current question box\n    const currentBox = (0, $4726fc9743f213d4$export$7cc3138f4d166b2).children[newIndex];\n    if (currentBox) {\n        currentBox.classList.add('current');\n        // Scroll the current box into view if it's outside the scrollable area\n        currentBox.scrollIntoView({\n            behavior: 'smooth',\n            block: 'nearest'\n        });\n    }\n}\nfunction $859539450d12e8ee$export$3bf2280bcf993d3e(indexToUpdate) {\n    const questionBox = (0, $4726fc9743f213d4$export$7cc3138f4d166b2).children[indexToUpdate];\n    if (questionBox && !(0, $b7c90650b3f126e0$export$1406d28fb2a7f1d3)) {\n        const qId = (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7)[indexToUpdate].id;\n        if ((0, $b7c90650b3f126e0$export$7931cf9ae0965376)[qId] !== null) {\n            questionBox.classList.add('answered');\n            questionBox.classList.remove('not-answered');\n        } else {\n            questionBox.classList.remove('answered');\n            questionBox.classList.add('not-answered');\n        }\n    }\n}\nfunction $859539450d12e8ee$export$6730ea2ae9ec998a() {\n    console.log('UI_STATE: Entering setInitialUIState');\n    (0, $4726fc9743f213d4$export$bb2b5c3157a19234).classList.remove('hidden');\n    console.log('UI_STATE: welcomeScreen after remove hidden:', (0, $4726fc9743f213d4$export$bb2b5c3157a19234).className);\n    (0, $4726fc9743f213d4$export$6350272b1e0b7e8).classList.add('hidden');\n    console.log('UI_STATE: quizLayout after add hidden:', (0, $4726fc9743f213d4$export$6350272b1e0b7e8).className);\n    (0, $4726fc9743f213d4$export$23eeced1ba2691b2).classList.add('hidden');\n    console.log('UI_STATE: timerDisplay after add hidden:', (0, $4726fc9743f213d4$export$23eeced1ba2691b2).className);\n    if (0, $4726fc9743f213d4$export$b96001d3bd7fd97) {\n        (0, $4726fc9743f213d4$export$b96001d3bd7fd97).classList.remove('hidden');\n        console.log('UI_STATE: mainElement after remove hidden:', (0, $4726fc9743f213d4$export$b96001d3bd7fd97).className);\n    }\n    (0, $4726fc9743f213d4$export$206da73a9838ae1a).disabled = true; // Disabled until questions are loaded\n    (0, $4726fc9743f213d4$export$206da73a9838ae1a).textContent = 'Start Quiz';\n    (0, $4726fc9743f213d4$export$c3907549ffb20170).innerHTML = ''; // Clear results display\n    (0, $4726fc9743f213d4$export$23eeced1ba2691b2).textContent = 'Time: 00:00'; // Reset timer display\n    (0, $4726fc9743f213d4$export$7cc3138f4d166b2).innerHTML = ''; // Clear side panel question boxes\n    // Reset settings inputs to current app state values\n    (0, $4726fc9743f213d4$export$962e2c1b7a3462a6).value = (0, $b7c90650b3f126e0$export$8a935dfb0d834401);\n    (0, $4726fc9743f213d4$export$d5eb3f5d7317a5f8).value = (0, $b7c90650b3f126e0$export$8999afcfe917b6ff);\n    (0, $4726fc9743f213d4$export$517db2e1af273fe5).value = (0, $b7c90650b3f126e0$export$d407372d96b56e5);\n    // Toggle time limit input visibility based on quiz mode\n    if ((0, $b7c90650b3f126e0$export$8a935dfb0d834401) === 'practice') {\n        (0, $4726fc9743f213d4$export$487c258504e4e2b3).classList.add('hidden');\n        console.log('UI_STATE: timeLimitGroup after add hidden (practice):', (0, $4726fc9743f213d4$export$487c258504e4e2b3).className);\n    } else {\n        (0, $4726fc9743f213d4$export$487c258504e4e2b3).classList.remove('hidden');\n        console.log('UI_STATE: timeLimitGroup after remove hidden (exam):', (0, $4726fc9743f213d4$export$487c258504e4e2b3).className);\n    }\n    // Update max questions span and input max attribute\n    (0, $4726fc9743f213d4$export$4701202506fd12c6).textContent = (0, $b7c90650b3f126e0$export$2deac3956661e672).length;\n    (0, $4726fc9743f213d4$export$d5eb3f5d7317a5f8).max = (0, $b7c90650b3f126e0$export$2deac3956661e672).length;\n    // Enable start quiz button if questions are loaded\n    if ((0, $b7c90650b3f126e0$export$2deac3956661e672).length > 0) (0, $4726fc9743f213d4$export$206da73a9838ae1a).disabled = false;\n    else (0, $4726fc9743f213d4$export$206da73a9838ae1a).disabled = true;\n    console.log('UI_STATE: Exiting setInitialUIState');\n}\nfunction $859539450d12e8ee$export$7619b4851e6d7e59(resetQuizCallback) {\n    (0, $4726fc9743f213d4$export$ef23df4d66ada1f1).removeEventListener('click', resetQuizCallback); // Remove to prevent multiple listeners\n    (0, $4726fc9743f213d4$export$ef23df4d66ada1f1).addEventListener('click', resetQuizCallback);\n}\n\n\n// IMPORTANT: Declare these at the module scope so they are available to nested functions\n// These will be assigned by the orchestrator (main.js)\nlet $186f71895d6e255e$var$_displayQuestionCallback;\nlet $186f71895d6e255e$var$_checkAnswersCallback;\nlet $186f71895d6e255e$var$_resetQuizCallback;\nfunction $186f71895d6e255e$export$1dd9c2b76bc778b7(displayQ, checkA, resetQ) {\n    $186f71895d6e255e$var$_displayQuestionCallback = displayQ;\n    $186f71895d6e255e$var$_checkAnswersCallback = checkA;\n    $186f71895d6e255e$var$_resetQuizCallback = resetQ;\n}\nfunction $186f71895d6e255e$export$846158ed34eece62() {\n    console.log(\"QUIZ_INIT: Entered initializeQuiz function.\");\n    (0, $b7c90650b3f126e0$export$7eb8b34162b430a8)(false);\n    (0, $b7c90650b3f126e0$export$28d43dc27a91af2f)(0);\n    const actualNumQuestions = Math.min((0, $b7c90650b3f126e0$export$8999afcfe917b6ff), (0, $b7c90650b3f126e0$export$2deac3956661e672).length);\n    const newShuffledQuestions = [\n        ...(0, $b7c90650b3f126e0$export$2deac3956661e672)\n    ].sort(()=>Math.random() - 0.5).slice(0, actualNumQuestions);\n    (0, $b7c90650b3f126e0$export$7558b63df0f7b9dc)(newShuffledQuestions);\n    (0, $b7c90650b3f126e0$export$bde75845a73f4019)({});\n    console.log(\"QUIZ_INIT: Questions shuffled and userAnswers initialized. Shuffled count:\", newShuffledQuestions.length);\n    newShuffledQuestions.forEach((q)=>{\n        (0, $b7c90650b3f126e0$export$6da5647c08341c42)(q.id, null); // Initialize answers to null for all questions\n    });\n    // --- UI Transition Calls ---\n    console.log(\"QUIZ_INIT: Attempting UI transition...\");\n    (0, $4726fc9743f213d4$export$bb2b5c3157a19234).classList.add('hidden'); // This is the key line for welcomeScreen\n    console.log('QUIZ_INIT: welcomeScreen class after add hidden:', (0, $4726fc9743f213d4$export$bb2b5c3157a19234).className);\n    (0, $4726fc9743f213d4$export$6350272b1e0b7e8).classList.remove('hidden'); // This is the key line for quizLayout\n    console.log('QUIZ_INIT: quizLayout class after remove hidden:', (0, $4726fc9743f213d4$export$6350272b1e0b7e8).className);\n    (0, $4726fc9743f213d4$export$23eeced1ba2691b2).classList.remove('hidden'); // This is the key line for timerDisplay\n    console.log('QUIZ_INIT: timerDisplay class after remove hidden:', (0, $4726fc9743f213d4$export$23eeced1ba2691b2).className);\n    // --- End UI Transition Calls ---\n    console.log(\"QUIZ_INIT: Generating question nav panel...\");\n    (0, $859539450d12e8ee$export$812bab9188b62cb9)($186f71895d6e255e$var$_displayQuestionCallback, (0, $859539450d12e8ee$export$3bf2280bcf993d3e), $186f71895d6e255e$var$_updateNavigationButtons);\n    console.log(\"QUIZ_INIT: Question nav panel generated.\");\n    console.log(\"QUIZ_INIT: Displaying first question...\");\n    $186f71895d6e255e$var$_displayQuestionCallback((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba)); // Use the injected callback here\n    console.log(\"QUIZ_INIT: First question displayed.\");\n    if ((0, $b7c90650b3f126e0$export$8a935dfb0d834401) === 'exam') (0, $23f5314cb83d0665$export$5985f5b4428bec55)((0, $b7c90650b3f126e0$export$d407372d96b56e5) * 60, $186f71895d6e255e$var$_checkAnswersCallback); // <--- MODIFIED: Pass the callback here\n    else (0, $23f5314cb83d0665$export$5985f5b4428bec55)(0); // Practice mode counts up from 0\n    console.log(\"QUIZ_INIT: Timer started.\");\n    // Pass the resetQuizCallback to addQuizEventListeners\n    (0, $859539450d12e8ee$export$7619b4851e6d7e59)($186f71895d6e255e$var$_resetQuizCallback);\n    // Call updateNavigationButtons with the correct callbacks\n    $186f71895d6e255e$var$_updateNavigationButtons($186f71895d6e255e$var$_displayQuestionCallback, $186f71895d6e255e$var$_checkAnswersCallback); // Use the injected callbacks here\n    console.log(\"QUIZ_INIT: Quiz initialized successfully.\");\n}\nfunction $186f71895d6e255e$export$ffe5ba36e7eed945(index) {\n    (0, $4726fc9743f213d4$export$dc5d33deea2d41fc).innerHTML = ''; // Clear previous question content\n    if (index < 0 || index >= (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7).length) {\n        console.error(\"Attempted to display out-of-bounds question index:\", index);\n        return;\n    }\n    const q = (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7)[index];\n    const questionDiv = document.createElement('div');\n    questionDiv.className = 'question';\n    questionDiv.dataset.id = q.id;\n    // Build options, pre-selecting if an answer exists and disabling if quiz has ended\n    const optionsHTML = q.options.map((option)=>`\n        <label>\n            <input type=\"radio\"\n                    name=\"question${q.id}\"\n                    value=\"${option}\"\n                    ${(0, $b7c90650b3f126e0$export$7931cf9ae0965376)[q.id] === option ? 'checked' : ''}\n                    ${(0, $b7c90650b3f126e0$export$1406d28fb2a7f1d3) ? 'disabled' : ''}>\n            ${option}\n        </label>\n    `).join('');\n    const questionHTML = `\n        <h3>${index + 1}: ${q.question}</h3>\n        ${optionsHTML}\n        <div class=\"explanation\" id=\"explanation${q.id}\" style=\"display: ${(0, $b7c90650b3f126e0$export$1406d28fb2a7f1d3) ? 'block' : 'none'};\">\n            <p><strong>Explanation:</strong> ${q.explanation}</p>\n        </div>\n    `;\n    questionDiv.innerHTML = questionHTML;\n    (0, $4726fc9743f213d4$export$dc5d33deea2d41fc).appendChild(questionDiv);\n    // Add event listeners for radio buttons to update user answers\n    const radioButtons = questionDiv.querySelectorAll(`input[name=\"question${q.id}\"]`);\n    radioButtons.forEach((radio)=>{\n        radio.addEventListener('change', (event)=>{\n            (0, $b7c90650b3f126e0$export$6da5647c08341c42)(q.id, event.target.value);\n            console.log(`Answer for Q${q.id} updated: ${event.target.value}`);\n            (0, $859539450d12e8ee$export$3bf2280bcf993d3e)((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba)); // Update side panel box status\n        });\n    });\n    // Apply immediate feedback styling if the quiz has ended\n    if (0, $b7c90650b3f126e0$export$1406d28fb2a7f1d3) $186f71895d6e255e$export$27ed0ddec6ce687c(q);\n    (0, $859539450d12e8ee$export$17a82b04f64e1546)(index); // Highlight the current question in the side panel\n}\nfunction $186f71895d6e255e$export$27ed0ddec6ce687c(q) {\n    const options = document.querySelectorAll(`#testContainer input[name=\"question${q.id}\"]`);\n    const userAnswer = (0, $b7c90650b3f126e0$export$7931cf9ae0965376)[q.id];\n    options.forEach((opt)=>{\n        opt.disabled = true; // Ensure all options are disabled for review\n        // Remove previous feedback classes before applying new ones (important for navigation)\n        opt.parentElement.classList.remove('correct', 'incorrect');\n        if (opt.value === q.answer) opt.parentElement.classList.add('correct'); // Mark correct answer\n        else if (opt.value === userAnswer && userAnswer !== q.answer) opt.parentElement.classList.add('incorrect'); // Mark user's incorrect answer\n    });\n    const explanationDiv = document.getElementById(`explanation${q.id}`);\n    if (explanationDiv) {\n        explanationDiv.style.display = 'block'; // Show explanation\n        explanationDiv.style.color = 'var(--text-light)'; // Ensure readability\n    }\n}\nfunction $186f71895d6e255e$export$cae4508e5bd16cd1() {\n    (0, $23f5314cb83d0665$export$4d41f7386211339a)(); // Stop the timer\n    (0, $b7c90650b3f126e0$export$7eb8b34162b430a8)(true); // Mark quiz as ended\n    // Update side panel question boxes with correct/incorrect status\n    (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7).forEach((q, index)=>{\n        const questionBox = (0, $4726fc9743f213d4$export$7cc3138f4d166b2).children[index];\n        if (questionBox) {\n            questionBox.classList.remove('answered', 'not-answered', 'current'); // Clean up temporary states\n            const userAnswer = (0, $b7c90650b3f126e0$export$7931cf9ae0965376)[q.id];\n            if (userAnswer === q.answer) questionBox.classList.add('correct');\n            else questionBox.classList.add('incorrect');\n        }\n    });\n    // Calculate score\n    let correct = 0;\n    let incorrect = 0;\n    let unanswered = 0;\n    (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7).forEach((q)=>{\n        const userAnswer = (0, $b7c90650b3f126e0$export$7931cf9ae0965376)[q.id];\n        if (userAnswer === null) unanswered++;\n        else if (userAnswer === q.answer) correct++;\n        else incorrect++;\n    });\n    const totalQuestionsAsked = (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7).length;\n    const percentage = totalQuestionsAsked > 0 ? Math.round(correct / totalQuestionsAsked * 100) : 0;\n    // Display results\n    (0, $4726fc9743f213d4$export$c3907549ffb20170).innerHTML = `\n        <h2>Test Results</h2>\n        <p>Correct: <span class=\"correct\">${correct}</span></p>\n        <p>Incorrect: <span class=\"incorrect\">${incorrect}</span></p>\n        <p>Unanswered: ${unanswered}</p>\n        <p>Score: ${percentage}%</p>\n        <p>${(0, $4726fc9743f213d4$export$23eeced1ba2691b2).textContent}</p>\n    `;\n    // Disable all radio inputs in the current question to prevent changes after submission\n    document.querySelectorAll('.question input[type=\"radio\"]').forEach((input)=>{\n        input.disabled = true;\n    });\n    $186f71895d6e255e$var$_updateNavigationButtons($186f71895d6e255e$var$_displayQuestionCallback, $186f71895d6e255e$var$_checkAnswersCallback); // Use the injected callbacks here\n    $186f71895d6e255e$var$_displayQuestionCallback((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba)); // Re-display current question to show feedback\n}\nfunction $186f71895d6e255e$export$cf35512e417f9253() {\n    (0, $23f5314cb83d0665$export$4d41f7386211339a)();\n    (0, $4726fc9743f213d4$export$23eeced1ba2691b2).classList.add('hidden');\n    (0, $4726fc9743f213d4$export$c3907549ffb20170).innerHTML = '';\n    (0, $859539450d12e8ee$export$6730ea2ae9ec998a)(); // Return to welcome screen\n}\n// Renamed and exported internal updateNavigationButtons for quizLogic to use\nfunction $186f71895d6e255e$var$_updateNavigationButtons(displayQuestionCallback, checkAnswersCallback) {\n    (0, $859539450d12e8ee$export$578c9bc0c99a8ff)(displayQuestionCallback, checkAnswersCallback);\n}\n\n\n\n// src/js/modules/fileLoader.js\n\n\n\nfunction $58d95d5e5894cd8c$export$f1ccc45a9664540b(e) {\n    const file = e.target.files[0];\n    if (file) {\n        const reader = new FileReader();\n        reader.onload = (event)=>{\n            try {\n                const loadedData = JSON.parse(event.target.result);\n                // Basic validation for loaded JSON structure\n                if (Array.isArray(loadedData) && loadedData.every((q)=>q.id !== undefined && typeof q.question === 'string' && Array.isArray(q.options) && q.options.length > 0 && typeof q.answer === 'string' && typeof q.explanation === 'string')) {\n                    (0, $b7c90650b3f126e0$export$1ed55773ccdb58a)(loadedData);\n                    console.log(\"Question set loaded successfully:\", loadedData);\n                    alert(`Successfully loaded ${loadedData.length} questions!`);\n                    // Update settings and enable start button\n                    (0, $4726fc9743f213d4$export$4701202506fd12c6).textContent = loadedData.length;\n                    (0, $4726fc9743f213d4$export$d5eb3f5d7317a5f8).max = loadedData.length;\n                    (0, $4726fc9743f213d4$export$d5eb3f5d7317a5f8).value = Math.min(loadedData.length, parseInt((0, $4726fc9743f213d4$export$d5eb3f5d7317a5f8).value)); // Adjust input value if it exceeds new max\n                    (0, $4726fc9743f213d4$export$206da73a9838ae1a).disabled = false;\n                } else {\n                    alert(\"Error: Invalid JSON format. Please ensure it's an array of question objects with 'id', 'question', 'options', 'answer', and 'explanation'.\");\n                    (0, $b7c90650b3f126e0$export$1ed55773ccdb58a)([]); // Clear questions on invalid format\n                    (0, $859539450d12e8ee$export$6730ea2ae9ec998a)(); // Reset UI state to reflect no questions loaded\n                }\n            } catch (error) {\n                alert(\"Error parsing JSON file. Please ensure it's a valid JSON format.\");\n                console.error(\"Error parsing JSON:\", error);\n                (0, $b7c90650b3f126e0$export$1ed55773ccdb58a)([]); // Clear questions on parsing error\n                (0, $859539450d12e8ee$export$6730ea2ae9ec998a)(); // Reset UI state to reflect no questions loaded\n            }\n        };\n        reader.readAsText(file);\n    }\n}\n\n\n'use strict';\n// Set up the circular dependencies by passing references\n// This must be done BEFORE initializeQuiz or other functions that use these callbacks are called.\n// It's crucial that quizLogic gets references to *its own* functions (displayQuestion, checkAnswers, resetQuiz)\n// AND uiHandlers functions (updateNavigationButtons, updateQuestionBoxStatus, generateQuestionNavPanel)\n// and vice-versa, but via injection through main.js.\n// Here, we define the concrete functions\nconst $54b47fc030b7b21e$var$displayQuestionConcrete = (index)=>$186f71895d6e255e$export$ffe5ba36e7eed945(index);\nconst $54b47fc030b7b21e$var$checkAnswersConcrete = ()=>$186f71895d6e255e$export$cae4508e5bd16cd1();\nconst $54b47fc030b7b21e$var$resetQuizConcrete = ()=>$186f71895d6e255e$export$cf35512e417f9253();\n// Now, inject these concrete functions into quizLogic and uiHandlers\n$186f71895d6e255e$export$1dd9c2b76bc778b7($54b47fc030b7b21e$var$displayQuestionConcrete, $54b47fc030b7b21e$var$checkAnswersConcrete, $54b47fc030b7b21e$var$resetQuizConcrete);\n// --- Event Listeners for UI Controls ---\n(0, $4726fc9743f213d4$export$6920059b56c9711d).addEventListener('click', ()=>{\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = (0, $58d95d5e5894cd8c$export$f1ccc45a9664540b);\n    input.click();\n});\n(0, $4726fc9743f213d4$export$962e2c1b7a3462a6).addEventListener('change', (event)=>{\n    (0, $b7c90650b3f126e0$export$3f2e9886f0e14798)(event.target.value);\n    $859539450d12e8ee$export$6730ea2ae9ec998a(); // Call through namespace\n});\n(0, $4726fc9743f213d4$export$d5eb3f5d7317a5f8).addEventListener('change', (event)=>{\n    let value = parseInt(event.target.value);\n    const max = parseInt((0, $4726fc9743f213d4$export$d5eb3f5d7317a5f8).max);\n    if (isNaN(value) || value < 1) value = 1;\n    else if (value > max) value = max;\n    (0, $4726fc9743f213d4$export$d5eb3f5d7317a5f8).value = value;\n    (0, $b7c90650b3f126e0$export$839f113108c3f006)(value);\n});\n(0, $4726fc9743f213d4$export$517db2e1af273fe5).addEventListener('change', (event)=>{\n    let value = parseInt(event.target.value);\n    if (isNaN(value) || value < 1) value = 1;\n    (0, $4726fc9743f213d4$export$517db2e1af273fe5).value = value;\n    (0, $b7c90650b3f126e0$export$fd4363b958afab88)(value);\n});\n(0, $4726fc9743f213d4$export$206da73a9838ae1a).addEventListener('click', ()=>{\n    if ((0, $b7c90650b3f126e0$export$2deac3956661e672).length === 0) {\n        alert(\"Please load a question set first using the 'Add Question Set' button.\");\n        return;\n    }\n    if ((0, $4726fc9743f213d4$export$d5eb3f5d7317a5f8).value > (0, $b7c90650b3f126e0$export$2deac3956661e672).length || (0, $4726fc9743f213d4$export$d5eb3f5d7317a5f8).value <= 0) {\n        alert(`Please enter a valid number of questions between 1 and ${(0, $b7c90650b3f126e0$export$2deac3956661e672).length}.`);\n        return;\n    }\n    console.log(\"Attempting to initialize quiz...\");\n    $186f71895d6e255e$export$846158ed34eece62(); // Call initializeQuiz from the namespace\n    console.log(\"initializeQuiz called.\");\n});\n(0, $4726fc9743f213d4$export$61b4ad7c9593758b).addEventListener('click', ()=>{\n    if ((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba) > 0) {\n        (0, $b7c90650b3f126e0$export$28d43dc27a91af2f)((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba) - 1);\n        $54b47fc030b7b21e$var$displayQuestionConcrete((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba)); // Use the concrete function\n        $859539450d12e8ee$export$578c9bc0c99a8ff($54b47fc030b7b21e$var$displayQuestionConcrete, $54b47fc030b7b21e$var$checkAnswersConcrete); // Pass callbacks\n    }\n});\n(0, $4726fc9743f213d4$export$a67709db11dc4b08).addEventListener('click', ()=>{\n    if (!(0, $b7c90650b3f126e0$export$1406d28fb2a7f1d3)) $859539450d12e8ee$export$3bf2280bcf993d3e((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba)); // Call from uiHandlers namespace\n    if ((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba) < (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7).length - 1) {\n        (0, $b7c90650b3f126e0$export$28d43dc27a91af2f)((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba) + 1);\n        $54b47fc030b7b21e$var$displayQuestionConcrete((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba)); // Use the concrete function\n        $859539450d12e8ee$export$578c9bc0c99a8ff($54b47fc030b7b21e$var$displayQuestionConcrete, $54b47fc030b7b21e$var$checkAnswersConcrete); // Pass callbacks\n    } else if ((0, $b7c90650b3f126e0$export$af5d38c6bf20bdba) === (0, $b7c90650b3f126e0$export$7cafe8229f22dfd7).length - 1 && !(0, $b7c90650b3f126e0$export$1406d28fb2a7f1d3)) $54b47fc030b7b21e$var$checkAnswersConcrete(); // Use the concrete function\n});\n// --- Initialization ---\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    $859539450d12e8ee$export$6730ea2ae9ec998a(); // Call through namespace\n    $859539450d12e8ee$export$7619b4851e6d7e59($54b47fc030b7b21e$var$resetQuizConcrete); // Pass the concrete resetQuiz function\n});\n\n\n//# sourceMappingURL=public.63c01d66.js.map\n","// src/js/main.js\r\n'use strict';\r\n\r\nimport {\r\n    addQuestionsBtn, startQuizBtn, quizModeSelect, numQuestionsInput, timeLimitInput,\r\n    prevQuestionBtn, nextQuestionBtn\r\n} from './modules/domElements.js';\r\nimport {\r\n    setQuizMode, setNumQuestionsToAsk, setTimeLimitMinutes, setCurrentQuestionIndex,\r\n    currentQuestionIndex, questions, shuffledQuestions, quizEnded,\r\n    updateUserAnswer\r\n} from './modules/state.js';\r\n// Import all quizLogic functions directly\r\nimport * as quizLogic from './modules/quizLogic.js'; // Import all as a namespace\r\nimport * as uiHandlers from './modules/uiHandlers.js'; // Import all as a namespace\r\nimport { handleFileLoad } from './modules/fileLoader.js';\r\n\r\n\r\n// Set up the circular dependencies by passing references\r\n// This must be done BEFORE initializeQuiz or other functions that use these callbacks are called.\r\n// It's crucial that quizLogic gets references to *its own* functions (displayQuestion, checkAnswers, resetQuiz)\r\n// AND uiHandlers functions (updateNavigationButtons, updateQuestionBoxStatus, generateQuestionNavPanel)\r\n// and vice-versa, but via injection through main.js.\r\n\r\n// Here, we define the concrete functions\r\nconst displayQuestionConcrete = (index) => quizLogic.displayQuestion(index);\r\nconst checkAnswersConcrete = () => quizLogic.checkAnswers();\r\nconst resetQuizConcrete = () => quizLogic.resetQuiz();\r\n\r\n// Now, inject these concrete functions into quizLogic and uiHandlers\r\nquizLogic.setCallbacks(displayQuestionConcrete, checkAnswersConcrete, resetQuizConcrete);\r\n\r\n\r\n// --- Event Listeners for UI Controls ---\r\n\r\naddQuestionsBtn.addEventListener('click', () => {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = '.json';\r\n    input.onchange = handleFileLoad;\r\n    input.click();\r\n});\r\n\r\nquizModeSelect.addEventListener('change', (event) => {\r\n    setQuizMode(event.target.value);\r\n    uiHandlers.setInitialUIState(); // Call through namespace\r\n});\r\n\r\nnumQuestionsInput.addEventListener('change', (event) => {\r\n    let value = parseInt(event.target.value);\r\n    const max = parseInt(numQuestionsInput.max);\r\n\r\n    if (isNaN(value) || value < 1) {\r\n        value = 1;\r\n    } else if (value > max) {\r\n        value = max;\r\n    }\r\n    numQuestionsInput.value = value;\r\n    setNumQuestionsToAsk(value);\r\n});\r\n\r\ntimeLimitInput.addEventListener('change', (event) => {\r\n    let value = parseInt(event.target.value);\r\n    if (isNaN(value) || value < 1) {\r\n        value = 1;\r\n    }\r\n    timeLimitInput.value = value;\r\n    setTimeLimitMinutes(value);\r\n});\r\n\r\nstartQuizBtn.addEventListener('click', () => {\r\n    if (questions.length === 0) {\r\n        alert(\"Please load a question set first using the 'Add Question Set' button.\");\r\n        return;\r\n    }\r\n    if (numQuestionsInput.value > questions.length || numQuestionsInput.value <= 0) {\r\n        alert(`Please enter a valid number of questions between 1 and ${questions.length}.`);\r\n        return;\r\n    }\r\n\r\n    console.log(\"Attempting to initialize quiz...\");\r\n    quizLogic.initializeQuiz(); // Call initializeQuiz from the namespace\r\n    console.log(\"initializeQuiz called.\");\r\n});\r\n\r\nprevQuestionBtn.addEventListener('click', () => {\r\n    if (currentQuestionIndex > 0) {\r\n        setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n        displayQuestionConcrete(currentQuestionIndex); // Use the concrete function\r\n        uiHandlers.updateNavigationButtons(displayQuestionConcrete, checkAnswersConcrete); // Pass callbacks\r\n    }\r\n});\r\n\r\nnextQuestionBtn.addEventListener('click', () => {\r\n    if (!quizEnded) {\r\n        uiHandlers.updateQuestionBoxStatus(currentQuestionIndex); // Call from uiHandlers namespace\r\n    }\r\n\r\n    if (currentQuestionIndex < shuffledQuestions.length - 1) {\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        displayQuestionConcrete(currentQuestionIndex); // Use the concrete function\r\n        uiHandlers.updateNavigationButtons(displayQuestionConcrete, checkAnswersConcrete); // Pass callbacks\r\n    } else if (currentQuestionIndex === shuffledQuestions.length - 1 && !quizEnded) {\r\n        checkAnswersConcrete(); // Use the concrete function\r\n    }\r\n});\r\n\r\n\r\n// --- Initialization ---\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    uiHandlers.setInitialUIState(); // Call through namespace\r\n    uiHandlers.addQuizEventListeners(resetQuizConcrete); // Pass the concrete resetQuiz function\r\n});","// src/js/modules/domElements.js\r\n\r\n// DOM Elements - Welcome Screen\r\nexport const welcomeScreen = document.getElementById('welcomeScreen');\r\nconsole.log('DOM Element Check: welcomeScreen', welcomeScreen); // ADD THIS\r\nexport const startQuizBtn = document.getElementById('startQuizBtn');\r\nconsole.log('DOM Element Check: startQuizBtn', startQuizBtn); // ADD THIS\r\nexport const addQuestionsBtn = document.getElementById('addQuestionsBtn');\r\nconsole.log('DOM Element Check: addQuestionsBtn', addQuestionsBtn); // ADD THIS\r\n\r\nexport const quizModeSelect = document.getElementById('quizMode');\r\nconsole.log('DOM Element Check: quizModeSelect', quizModeSelect); // ADD THIS\r\nexport const numQuestionsInput = document.getElementById('numQuestions');\r\nconsole.log('DOM Element Check: numQuestionsInput', numQuestionsInput); // ADD THIS\r\nexport const maxQuestionsSpan = document.getElementById('maxQuestions');\r\nconsole.log('DOM Element Check: maxQuestionsSpan', maxQuestionsSpan); // ADD THIS\r\nexport const timeLimitGroup = document.getElementById('timeLimitGroup');\r\nconsole.log('DOM Element Check: timeLimitGroup', timeLimitGroup); // ADD THIS\r\nexport const timeLimitInput = document.getElementById('timeLimit');\r\nconsole.log('DOM Element Check: timeLimitInput', timeLimitInput); // ADD THIS\r\n\r\n// DOM Elements - Quiz Layout\r\nexport const quizLayout = document.getElementById('quizLayout');\r\nconsole.log('DOM Element Check: quizLayout', quizLayout); // ADD THIS\r\nexport const testContainer = document.getElementById('testContainer');\r\nconsole.log('DOM Element Check: testContainer', testContainer); // ADD THIS\r\nexport const resultsDiv = document.getElementById('results');\r\nconsole.log('DOM Element Check: resultsDiv', resultsDiv); // ADD THIS\r\nexport const timerDisplay = document.getElementById('timer');\r\nconsole.log('DOM Element Check: timerDisplay', timerDisplay); // ADD THIS\r\n\r\n// DOM Elements - Quiz Content Navigation Buttons\r\nexport const prevQuestionBtn = document.getElementById('prevQuestionBtn');\r\nconsole.log('DOM Element Check: prevQuestionBtn', prevQuestionBtn); // ADD THIS\r\nexport const nextQuestionBtn = document.getElementById('nextQuestionBtn');\r\nconsole.log('DOM Element Check: nextQuestionBtn', nextQuestionBtn); // ADD THIS\r\nexport const resetQuizBtn = document.getElementById('resetQuizBtn');\r\nconsole.log('DOM Element Check: resetQuizBtn', resetQuizBtn); // ADD THIS\r\n\r\n// DOM Elements - Side Panel Navigation\r\nexport const questionNavPanel = document.getElementById('questionNavPanel');\r\nconsole.log('DOM Element Check: questionNavPanel', questionNavPanel); // ADD THIS\r\nexport const questionBoxesContainer = document.getElementById('questionBoxes');\r\nconsole.log('DOM Element Check: questionBoxesContainer', questionBoxesContainer); // ADD THIS\r\n\r\nexport const mainElement = document.querySelector('main');\r\nconsole.log('DOM Element Check: mainElement', mainElement); // ADD THIS","// src/js/modules/state.js\r\n\r\nexport let questions = []; // Global variable to store questions loaded from JSON\r\n\r\n// App State for Quiz Settings\r\nexport let quizMode = 'practice'; // 'practice' or 'exam'\r\nexport let numQuestionsToAsk = 10;\r\nexport let timeLimitMinutes = 30; // Only for exam mode\r\nexport let currentQuestionIndex = 0; // Track the currently displayed question\r\n\r\n// App State for Current Quiz Session\r\nexport let shuffledQuestions = [];\r\nexport let userAnswers = {}; // Store answers for all questions (key: question.id, value: selectedOptionValue or null)\r\nexport let startTime;\r\nexport let timerInterval;\r\nexport let quizEnded = false; // Flag to check if quiz has been submitted/ended\r\n\r\n// Functions to update state (important for managing state changes externally)\r\nexport function setQuestions(newQuestions) {\r\n    questions = newQuestions;\r\n}\r\nexport function setQuizMode(mode) {\r\n    quizMode = mode;\r\n}\r\nexport function setNumQuestionsToAsk(num) {\r\n    numQuestionsToAsk = num;\r\n}\r\nexport function setTimeLimitMinutes(minutes) {\r\n    timeLimitMinutes = minutes;\r\n}\r\nexport function setCurrentQuestionIndex(index) {\r\n    currentQuestionIndex = index;\r\n}\r\nexport function setShuffledQuestions(shuffled) {\r\n    shuffledQuestions = shuffled;\r\n}\r\nexport function setUserAnswers(answers) {\r\n    userAnswers = answers;\r\n}\r\nexport function updateUserAnswer(questionId, answer) {\r\n    userAnswers[questionId] = answer;\r\n}\r\nexport function setQuizEnded(ended) {\r\n    quizEnded = ended;\r\n}\r\nexport function setStartTime(time) {\r\n    startTime = time;\r\n}\r\nexport function setTimerInterval(interval) {\r\n    timerInterval = interval;\r\n}\r\n\r\nexport function getStartTime() {\r\n    return startTime;\r\n}\r\nexport function getTimerInterval() {\r\n    return timerInterval;\r\n}","// src/js/modules/quizLogic.js\r\nimport {\r\n    testContainer, resultsDiv, timerDisplay, questionBoxesContainer, welcomeScreen, quizLayout\r\n} from './domElements.js';\r\nimport {\r\n    questions, shuffledQuestions, userAnswers, quizMode, numQuestionsToAsk, timeLimitMinutes, currentQuestionIndex, quizEnded,\r\n    setCurrentQuestionIndex, setShuffledQuestions, setUserAnswers, setQuizEnded, updateUserAnswer\r\n} from './state.js';\r\nimport { startTimer, stopTimer } from './timer.js';\r\nimport {\r\n    generateQuestionNavPanel, updateQuestionNavHighlight, updateQuestionBoxStatus,\r\n    updateNavigationButtons, addQuizEventListeners, setInitialUIState // Import setInitialUIState for resetQuiz\r\n} from './uiHandlers.js';\r\n\r\n// IMPORTANT: Declare these at the module scope so they are available to nested functions\r\n// These will be assigned by the orchestrator (main.js)\r\nlet _displayQuestionCallback;\r\nlet _checkAnswersCallback;\r\nlet _resetQuizCallback;\r\n\r\n// Setter functions to allow main.js to inject the callbacks\r\nexport function setCallbacks(displayQ, checkA, resetQ) {\r\n    _displayQuestionCallback = displayQ;\r\n    _checkAnswersCallback = checkA;\r\n    _resetQuizCallback = resetQ;\r\n}\r\n\r\n/**\r\n * Initializes a new quiz session.\r\n * Resets quiz state, shuffles questions, and sets up the timer.\r\n */\r\nexport function initializeQuiz() {\r\n    console.log(\"QUIZ_INIT: Entered initializeQuiz function.\");\r\n\r\n    setQuizEnded(false);\r\n    setCurrentQuestionIndex(0);\r\n\r\n    const actualNumQuestions = Math.min(numQuestionsToAsk, questions.length);\r\n    const newShuffledQuestions = [...questions].sort(() => Math.random() - 0.5).slice(0, actualNumQuestions);\r\n    setShuffledQuestions(newShuffledQuestions);\r\n    setUserAnswers({});\r\n\r\n    console.log(\"QUIZ_INIT: Questions shuffled and userAnswers initialized. Shuffled count:\", newShuffledQuestions.length);\r\n\r\n    newShuffledQuestions.forEach(q => {\r\n        updateUserAnswer(q.id, null); // Initialize answers to null for all questions\r\n    });\r\n\r\n    // --- UI Transition Calls ---\r\n    console.log(\"QUIZ_INIT: Attempting UI transition...\");\r\n    welcomeScreen.classList.add('hidden'); // This is the key line for welcomeScreen\r\n    console.log('QUIZ_INIT: welcomeScreen class after add hidden:', welcomeScreen.className);\r\n\r\n    quizLayout.classList.remove('hidden'); // This is the key line for quizLayout\r\n    console.log('QUIZ_INIT: quizLayout class after remove hidden:', quizLayout.className);\r\n\r\n    timerDisplay.classList.remove('hidden'); // This is the key line for timerDisplay\r\n    console.log('QUIZ_INIT: timerDisplay class after remove hidden:', timerDisplay.className);\r\n    // --- End UI Transition Calls ---\r\n\r\n    console.log(\"QUIZ_INIT: Generating question nav panel...\");\r\n    generateQuestionNavPanel(_displayQuestionCallback, updateQuestionBoxStatus, _updateNavigationButtons);\r\n    console.log(\"QUIZ_INIT: Question nav panel generated.\");\r\n\r\n    console.log(\"QUIZ_INIT: Displaying first question...\");\r\n    _displayQuestionCallback(currentQuestionIndex); // Use the injected callback here\r\n    console.log(\"QUIZ_INIT: First question displayed.\");\r\n\r\n    if (quizMode === 'exam') {\r\n        startTimer(timeLimitMinutes * 60, _checkAnswersCallback); // <--- MODIFIED: Pass the callback here\r\n    } else {\r\n        startTimer(0); // Practice mode counts up from 0\r\n    }\r\n    console.log(\"QUIZ_INIT: Timer started.\");\r\n\r\n    // Pass the resetQuizCallback to addQuizEventListeners\r\n    addQuizEventListeners(_resetQuizCallback);\r\n    // Call updateNavigationButtons with the correct callbacks\r\n    _updateNavigationButtons(_displayQuestionCallback, _checkAnswersCallback); // Use the injected callbacks here\r\n    console.log(\"QUIZ_INIT: Quiz initialized successfully.\");\r\n}\r\n\r\n/**\r\n * Displays a specific question based on its index. (This function will be passed as a callback)\r\n * @param {number} index - The index of the question to display.\r\n */\r\nexport function displayQuestion(index) {\r\n    testContainer.innerHTML = ''; // Clear previous question content\r\n\r\n    if (index < 0 || index >= shuffledQuestions.length) {\r\n        console.error(\"Attempted to display out-of-bounds question index:\", index);\r\n        return;\r\n    }\r\n\r\n    const q = shuffledQuestions[index];\r\n    const questionDiv = document.createElement('div');\r\n    questionDiv.className = 'question';\r\n    questionDiv.dataset.id = q.id;\r\n\r\n    // Build options, pre-selecting if an answer exists and disabling if quiz has ended\r\n    const optionsHTML = q.options.map(option => `\r\n        <label>\r\n            <input type=\"radio\"\r\n                    name=\"question${q.id}\"\r\n                    value=\"${option}\"\r\n                    ${userAnswers[q.id] === option ? 'checked' : ''}\r\n                    ${quizEnded ? 'disabled' : ''}>\r\n            ${option}\r\n        </label>\r\n    `).join('');\r\n\r\n    const questionHTML = `\r\n        <h3>${index + 1}: ${q.question}</h3>\r\n        ${optionsHTML}\r\n        <div class=\"explanation\" id=\"explanation${q.id}\" style=\"display: ${quizEnded ? 'block' : 'none'};\">\r\n            <p><strong>Explanation:</strong> ${q.explanation}</p>\r\n        </div>\r\n    `;\r\n\r\n    questionDiv.innerHTML = questionHTML;\r\n    testContainer.appendChild(questionDiv);\r\n\r\n    // Add event listeners for radio buttons to update user answers\r\n    const radioButtons = questionDiv.querySelectorAll(`input[name=\"question${q.id}\"]`);\r\n    radioButtons.forEach(radio => {\r\n        radio.addEventListener('change', (event) => {\r\n            updateUserAnswer(q.id, event.target.value);\r\n            console.log(`Answer for Q${q.id} updated: ${event.target.value}`);\r\n            updateQuestionBoxStatus(currentQuestionIndex); // Update side panel box status\r\n        });\r\n    });\r\n\r\n    // Apply immediate feedback styling if the quiz has ended\r\n    if (quizEnded) {\r\n        applyFeedbackStyling(q);\r\n    }\r\n\r\n    updateQuestionNavHighlight(index); // Highlight the current question in the side panel\r\n}\r\n\r\n/**\r\n * Applies correct/incorrect styling and reveals explanations after the quiz ends.\r\n * @param {object} q - The question object to apply feedback for.\r\n */\r\nexport function applyFeedbackStyling(q) {\r\n    const options = document.querySelectorAll(`#testContainer input[name=\"question${q.id}\"]`);\r\n    const userAnswer = userAnswers[q.id];\r\n\r\n    options.forEach(opt => {\r\n        opt.disabled = true; // Ensure all options are disabled for review\r\n\r\n        // Remove previous feedback classes before applying new ones (important for navigation)\r\n        opt.parentElement.classList.remove('correct', 'incorrect');\r\n\r\n        if (opt.value === q.answer) {\r\n            opt.parentElement.classList.add('correct'); // Mark correct answer\r\n        } else if (opt.value === userAnswer && userAnswer !== q.answer) {\r\n            opt.parentElement.classList.add('incorrect'); // Mark user's incorrect answer\r\n        }\r\n    });\r\n\r\n    const explanationDiv = document.getElementById(`explanation${q.id}`);\r\n    if (explanationDiv) {\r\n        explanationDiv.style.display = 'block'; // Show explanation\r\n        explanationDiv.style.color = 'var(--text-light)'; // Ensure readability\r\n    }\r\n}\r\n\r\n/**\r\n * Calculates quiz results and displays them.\r\n * Sets `quizEnded` flag and disables further input.\r\n */\r\nexport function checkAnswers() {\r\n    stopTimer(); // Stop the timer\r\n    setQuizEnded(true); // Mark quiz as ended\r\n\r\n    // Update side panel question boxes with correct/incorrect status\r\n    shuffledQuestions.forEach((q, index) => {\r\n        const questionBox = questionBoxesContainer.children[index];\r\n        if (questionBox) {\r\n            questionBox.classList.remove('answered', 'not-answered', 'current'); // Clean up temporary states\r\n            const userAnswer = userAnswers[q.id];\r\n            if (userAnswer === q.answer) {\r\n                questionBox.classList.add('correct');\r\n            } else {\r\n                questionBox.classList.add('incorrect');\r\n            }\r\n        }\r\n    });\r\n\r\n    // Calculate score\r\n    let correct = 0;\r\n    let incorrect = 0;\r\n    let unanswered = 0;\r\n\r\n    shuffledQuestions.forEach(q => {\r\n        const userAnswer = userAnswers[q.id];\r\n        if (userAnswer === null) {\r\n            unanswered++;\r\n        } else if (userAnswer === q.answer) {\r\n            correct++;\r\n        } else {\r\n            incorrect++;\r\n        }\r\n    });\r\n\r\n    const totalQuestionsAsked = shuffledQuestions.length;\r\n    const percentage = totalQuestionsAsked > 0 ? Math.round((correct / totalQuestionsAsked) * 100) : 0;\r\n\r\n    // Display results\r\n    resultsDiv.innerHTML = `\r\n        <h2>Test Results</h2>\r\n        <p>Correct: <span class=\"correct\">${correct}</span></p>\r\n        <p>Incorrect: <span class=\"incorrect\">${incorrect}</span></p>\r\n        <p>Unanswered: ${unanswered}</p>\r\n        <p>Score: ${percentage}%</p>\r\n        <p>${timerDisplay.textContent}</p>\r\n    `;\r\n\r\n    // Disable all radio inputs in the current question to prevent changes after submission\r\n    document.querySelectorAll('.question input[type=\"radio\"]').forEach(input => {\r\n        input.disabled = true;\r\n    });\r\n\r\n    _updateNavigationButtons(_displayQuestionCallback, _checkAnswersCallback); // Use the injected callbacks here\r\n    _displayQuestionCallback(currentQuestionIndex); // Re-display current question to show feedback\r\n}\r\n\r\n/**\r\n * Resets the quiz state and returns to the welcome screen.\r\n */\r\nexport function resetQuiz() {\r\n    stopTimer();\r\n    timerDisplay.classList.add('hidden');\r\n    resultsDiv.innerHTML = '';\r\n    setInitialUIState(); // Return to welcome screen\r\n}\r\n\r\n// Renamed and exported internal updateNavigationButtons for quizLogic to use\r\nfunction _updateNavigationButtons(displayQuestionCallback, checkAnswersCallback) {\r\n    updateNavigationButtons(displayQuestionCallback, checkAnswersCallback);\r\n}","// src/js/modules/timer.js\r\nimport { timerDisplay } from './domElements.js';\r\nimport { quizMode, setTimerInterval, setStartTime, getTimerInterval, getStartTime } from './state.js';\r\n// REMOVE THIS LINE: import { checkAnswers } from './quizLogic.js';\r\n\r\n/**\r\n * Formats a total number of seconds into a MM:SS string.\r\n * @param {number} totalSeconds - The total number of seconds.\r\n * @returns {string} Formatted time string (MM:SS).\r\n */\r\nfunction formatTime(totalSeconds) {\r\n    if (totalSeconds < 0) totalSeconds = 0;\r\n    const minutes = Math.floor(totalSeconds / 60).toString().padStart(2, '0');\r\n    const seconds = (totalSeconds % 60).toString().padStart(2, '0');\r\n    return `Time: ${minutes}:${seconds}`;\r\n}\r\n\r\n/**\r\n * Updates the timer display for practice mode (counts up).\r\n */\r\nfunction updatePracticeTimer() {\r\n    const now = new Date();\r\n    const elapsed = new Date(now - getStartTime());\r\n    const minutes = elapsed.getMinutes().toString().padStart(2, '0');\r\n    const seconds = elapsed.getSeconds().toString().padStart(2, '0');\r\n    timerDisplay.textContent = `Time: ${minutes}:${seconds}`;\r\n}\r\n\r\n/**\r\n * Starts or resets the quiz timer based on quiz mode.\r\n * @param {number} limitSeconds - The time limit in seconds for exam mode, 0 for practice mode.\r\n * @param {Function} checkAnswersCallback - Callback function to call when time runs out in exam mode. // <--- ADD THIS PARAMETER\r\n */\r\nexport function startTimer(limitSeconds = 0, checkAnswersCallback) { // <--- ADD checkAnswersCallback PARAMETER\r\n    clearInterval(getTimerInterval()); // Clear any existing timer\r\n\r\n    if (limitSeconds > 0) { // Exam mode: countdown\r\n        let remainingSeconds = limitSeconds;\r\n        timerDisplay.textContent = formatTime(remainingSeconds);\r\n\r\n        const interval = setInterval(() => {\r\n            remainingSeconds--;\r\n            timerDisplay.textContent = formatTime(remainingSeconds);\r\n\r\n            if (remainingSeconds <= 0) {\r\n                clearInterval(getTimerInterval());\r\n                alert(\"Time's up! Submitting your answers.\");\r\n                if (checkAnswersCallback) { // <--- CALL THE CALLBACK\r\n                    checkAnswersCallback();\r\n                }\r\n            }\r\n        }, 1000);\r\n        setTimerInterval(interval);\r\n    } else { // Practice mode: count up\r\n        setStartTime(new Date());\r\n        timerDisplay.textContent = 'Time: 00:00';\r\n        const interval = setInterval(updatePracticeTimer, 1000);\r\n        setTimerInterval(interval);\r\n    }\r\n}\r\n\r\nexport function stopTimer() {\r\n    clearInterval(getTimerInterval());\r\n    setTimerInterval(null); // Clear the interval ID\r\n}","// src/js/modules/uiHandlers.js\r\nimport {\r\n    prevQuestionBtn, nextQuestionBtn, resetQuizBtn,\r\n    questionBoxesContainer, testContainer, resultsDiv, timerDisplay,\r\n    welcomeScreen, quizLayout,\r\n    startQuizBtn, quizModeSelect, numQuestionsInput, maxQuestionsSpan, timeLimitGroup, timeLimitInput,\r\n    mainElement\r\n} from './domElements.js';\r\nimport {\r\n    questions, shuffledQuestions, userAnswers,\r\n    quizMode, numQuestionsToAsk, timeLimitMinutes, currentQuestionIndex, quizEnded,\r\n    setQuizMode, setNumQuestionsToAsk, setTimeLimitMinutes, setCurrentQuestionIndex, setQuizEnded\r\n} from './state.js';\r\n\r\n/**\r\n * Updates the visibility and text of navigation buttons based on current quiz state.\r\n * @param {Function} displayQuestionCallback - Callback to display a question.\r\n * @param {Function} checkAnswersCallback - Callback to check answers.\r\n */\r\nexport function updateNavigationButtons(displayQuestionCallback, checkAnswersCallback) {\r\n    // Show/hide previous button based on current question index\r\n    if (currentQuestionIndex === 0) {\r\n        prevQuestionBtn.classList.add('hidden');\r\n    } else {\r\n        prevQuestionBtn.classList.remove('hidden');\r\n    }\r\n\r\n    // Determine text and visibility of next/submit button\r\n    if (quizEnded) {\r\n        // If quiz has ended, all questions are for review\r\n        prevQuestionBtn.disabled = false;\r\n        nextQuestionBtn.disabled = false;\r\n        nextQuestionBtn.textContent = 'Review Next \\u2192';\r\n        prevQuestionBtn.textContent = '\\u2190 Review Previous';\r\n        nextQuestionBtn.classList.remove('hidden'); // Ensure it's visible for review\r\n        prevQuestionBtn.classList.remove('hidden'); // Ensure it's visible for review\r\n\r\n\r\n        // Hide navigation buttons if only one question or at the ends of review\r\n        if (shuffledQuestions.length === 1) {\r\n            prevQuestionBtn.classList.add('hidden');\r\n            nextQuestionBtn.classList.add('hidden');\r\n        } else if (currentQuestionIndex === shuffledQuestions.length - 1) {\r\n            nextQuestionBtn.classList.add('hidden'); // Hide 'next' if at last question in review\r\n        } else if (currentQuestionIndex === 0) {\r\n            prevQuestionBtn.classList.add('hidden'); // Hide 'previous' if at first question in review\r\n        }\r\n\r\n        resetQuizBtn.classList.remove('hidden'); // Always show reset button after quiz ends\r\n    } else {\r\n        // If quiz is ongoing\r\n        nextQuestionBtn.classList.remove('hidden'); // Ensure it's visible for an active quiz\r\n        prevQuestionBtn.classList.remove('hidden'); // Ensure it's visible for an active quiz\r\n\r\n        if (currentQuestionIndex === shuffledQuestions.length - 1) {\r\n            nextQuestionBtn.textContent = 'Submit Answers';\r\n        } else {\r\n            nextQuestionBtn.textContent = 'Next \\u2192';\r\n        }\r\n        prevQuestionBtn.textContent = '\\u2190 Previous';\r\n\r\n        resetQuizBtn.classList.add('hidden'); // Hide reset button during quiz\r\n    }\r\n}\r\n\r\n/**\r\n * Generates the clickable question boxes in the side navigation panel.\r\n * @param {Function} displayQuestionCallback - Callback to display a question.\r\n * @param {Function} updateQuestionBoxStatusCallback - Callback to update question box status.\r\n * @param {Function} updateNavigationButtonsCallback - Callback to update navigation buttons.\r\n */\r\nexport function generateQuestionNavPanel(displayQuestionCallback, updateQuestionBoxStatusCallback, updateNavigationButtonsCallback) {\r\n    questionBoxesContainer.innerHTML = ''; // Clear previous boxes\r\n    shuffledQuestions.forEach((q, index) => {\r\n        const questionBox = document.createElement('div');\r\n        questionBox.classList.add('question-box');\r\n        questionBox.textContent = index + 1; // Display 1-based index\r\n        questionBox.dataset.index = index; // Store 0-based index for easy access\r\n\r\n        // Set initial answered/not-answered status\r\n        if (userAnswers[q.id] === null) {\r\n            questionBox.classList.add('not-answered');\r\n        } else {\r\n            questionBox.classList.add('answered');\r\n        }\r\n\r\n        // Add click listener for direct question navigation\r\n        questionBox.addEventListener('click', (event) => {\r\n            const clickedIndex = parseInt(event.target.dataset.index);\r\n            if (clickedIndex !== currentQuestionIndex) {\r\n                // If quiz is ongoing, update status of the *previous* current question\r\n                if (!quizEnded) {\r\n                    updateQuestionBoxStatusCallback(currentQuestionIndex);\r\n                }\r\n                setCurrentQuestionIndex(clickedIndex);\r\n                displayQuestionCallback(currentQuestionIndex);\r\n                updateNavigationButtonsCallback();\r\n            }\r\n        });\r\n        questionBoxesContainer.appendChild(questionBox);\r\n    });\r\n    updateQuestionNavHighlight(currentQuestionIndex); // Highlight the first question initially\r\n}\r\n\r\n/**\r\n * Updates the 'current' highlight on the question navigation panel.\r\n * @param {number} newIndex - The index of the question to highlight.\r\n */\r\nexport function updateQuestionNavHighlight(newIndex) {\r\n    // Remove 'current' class from all boxes\r\n    Array.from(questionBoxesContainer.children).forEach((box) => {\r\n        box.classList.remove('current');\r\n    });\r\n    // Add 'current' class to the new current question box\r\n    const currentBox = questionBoxesContainer.children[newIndex];\r\n    if (currentBox) {\r\n        currentBox.classList.add('current');\r\n        // Scroll the current box into view if it's outside the scrollable area\r\n        currentBox.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\r\n    }\r\n}\r\n\r\n/**\r\n * Updates the 'answered' or 'not-answered' status of a question box in the side panel.\r\n * @param {number} indexToUpdate - The index of the question box to update.\r\n */\r\nexport function updateQuestionBoxStatus(indexToUpdate) {\r\n    const questionBox = questionBoxesContainer.children[indexToUpdate];\r\n    if (questionBox && !quizEnded) { // Only update answered/not-answered if quiz isn't ended\r\n        const qId = shuffledQuestions[indexToUpdate].id;\r\n        if (userAnswers[qId] !== null) {\r\n            questionBox.classList.add('answered');\r\n            questionBox.classList.remove('not-answered');\r\n        } else {\r\n            questionBox.classList.remove('answered');\r\n            questionBox.classList.add('not-answered');\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the initial UI state, displaying the welcome screen.\r\n */\r\nexport function setInitialUIState() {\r\n    console.log('UI_STATE: Entering setInitialUIState');\r\n\r\n    welcomeScreen.classList.remove('hidden');\r\n    console.log('UI_STATE: welcomeScreen after remove hidden:', welcomeScreen.className);\r\n\r\n    quizLayout.classList.add('hidden');\r\n    console.log('UI_STATE: quizLayout after add hidden:', quizLayout.className);\r\n\r\n    timerDisplay.classList.add('hidden');\r\n    console.log('UI_STATE: timerDisplay after add hidden:', timerDisplay.className);\r\n\r\n    if (mainElement) {\r\n        mainElement.classList.remove('hidden');\r\n        console.log('UI_STATE: mainElement after remove hidden:', mainElement.className);\r\n    }\r\n\r\n    startQuizBtn.disabled = true; // Disabled until questions are loaded\r\n    startQuizBtn.textContent = 'Start Quiz';\r\n    resultsDiv.innerHTML = ''; // Clear results display\r\n    timerDisplay.textContent = 'Time: 00:00'; // Reset timer display\r\n    questionBoxesContainer.innerHTML = ''; // Clear side panel question boxes\r\n\r\n    // Reset settings inputs to current app state values\r\n    quizModeSelect.value = quizMode;\r\n    numQuestionsInput.value = numQuestionsToAsk;\r\n    timeLimitInput.value = timeLimitMinutes;\r\n\r\n    // Toggle time limit input visibility based on quiz mode\r\n    if (quizMode === 'practice') {\r\n        timeLimitGroup.classList.add('hidden');\r\n        console.log('UI_STATE: timeLimitGroup after add hidden (practice):', timeLimitGroup.className);\r\n    } else {\r\n        timeLimitGroup.classList.remove('hidden');\r\n        console.log('UI_STATE: timeLimitGroup after remove hidden (exam):', timeLimitGroup.className);\r\n    }\r\n\r\n    // Update max questions span and input max attribute\r\n    maxQuestionsSpan.textContent = questions.length;\r\n    numQuestionsInput.max = questions.length;\r\n\r\n    // Enable start quiz button if questions are loaded\r\n    if (questions.length > 0) {\r\n        startQuizBtn.disabled = false;\r\n    } else {\r\n        startQuizBtn.disabled = true;\r\n    }\r\n    console.log('UI_STATE: Exiting setInitialUIState');\r\n}\r\n\r\n/**\r\n * Adds or re-adds primary quiz-wide event listeners.\r\n * Used at quiz initialization to ensure they are active.\r\n * @param {Function} resetQuizCallback - Callback to reset the quiz.\r\n */\r\nexport function addQuizEventListeners(resetQuizCallback) {\r\n    resetQuizBtn.removeEventListener('click', resetQuizCallback); // Remove to prevent multiple listeners\r\n    resetQuizBtn.addEventListener('click', resetQuizCallback);\r\n}","// src/js/modules/fileLoader.js\r\nimport { setQuestions } from './state.js';\r\nimport { maxQuestionsSpan, numQuestionsInput, startQuizBtn } from './domElements.js';\r\nimport { setInitialUIState } from './uiHandlers.js';\r\n\r\nexport function handleFileLoad(e) {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n            try {\r\n                const loadedData = JSON.parse(event.target.result);\r\n                // Basic validation for loaded JSON structure\r\n                if (Array.isArray(loadedData) && loadedData.every(q =>\r\n                    q.id !== undefined && typeof q.question === 'string' &&\r\n                    Array.isArray(q.options) && q.options.length > 0 &&\r\n                    typeof q.answer === 'string' && typeof q.explanation === 'string'\r\n                )) {\r\n                    setQuestions(loadedData);\r\n                    console.log(\"Question set loaded successfully:\", loadedData);\r\n                    alert(`Successfully loaded ${loadedData.length} questions!`);\r\n\r\n                    // Update settings and enable start button\r\n                    maxQuestionsSpan.textContent = loadedData.length;\r\n                    numQuestionsInput.max = loadedData.length;\r\n                    numQuestionsInput.value = Math.min(loadedData.length, parseInt(numQuestionsInput.value)); // Adjust input value if it exceeds new max\r\n\r\n                    startQuizBtn.disabled = false;\r\n                } else {\r\n                    alert(\"Error: Invalid JSON format. Please ensure it's an array of question objects with 'id', 'question', 'options', 'answer', and 'explanation'.\");\r\n                    setQuestions([]); // Clear questions on invalid format\r\n                    setInitialUIState(); // Reset UI state to reflect no questions loaded\r\n                }\r\n            } catch (error) {\r\n                alert(\"Error parsing JSON file. Please ensure it's a valid JSON format.\");\r\n                console.error(\"Error parsing JSON:\", error);\r\n                setQuestions([]); // Clear questions on parsing error\r\n                setInitialUIState(); // Reset UI state to reflect no questions loaded\r\n            }\r\n        };\r\n        reader.readAsText(file);\r\n    }\r\n}"],"names":["$b7c90650b3f126e0$export$adfca638bebe93b2","$b7c90650b3f126e0$export$829e2e869638b7b7","$186f71895d6e255e$var$_displayQuestionCallback","$186f71895d6e255e$var$_checkAnswersCallback","$4726fc9743f213d4$export$bb2b5c3157a19234","document","getElementById","console","log","$4726fc9743f213d4$export$206da73a9838ae1a","$4726fc9743f213d4$export$6920059b56c9711d","$4726fc9743f213d4$export$962e2c1b7a3462a6","$4726fc9743f213d4$export$d5eb3f5d7317a5f8","$4726fc9743f213d4$export$4701202506fd12c6","$4726fc9743f213d4$export$487c258504e4e2b3","$4726fc9743f213d4$export$517db2e1af273fe5","$4726fc9743f213d4$export$6350272b1e0b7e8","$4726fc9743f213d4$export$dc5d33deea2d41fc","$4726fc9743f213d4$export$c3907549ffb20170","$4726fc9743f213d4$export$23eeced1ba2691b2","$4726fc9743f213d4$export$61b4ad7c9593758b","$4726fc9743f213d4$export$a67709db11dc4b08","$4726fc9743f213d4$export$ef23df4d66ada1f1","$4726fc9743f213d4$export$7cc3138f4d166b2","$4726fc9743f213d4$export$b96001d3bd7fd97","querySelector","$b7c90650b3f126e0$export$2deac3956661e672","$b7c90650b3f126e0$export$8a935dfb0d834401","$b7c90650b3f126e0$export$8999afcfe917b6ff","$b7c90650b3f126e0$export$d407372d96b56e5","$b7c90650b3f126e0$export$af5d38c6bf20bdba","$b7c90650b3f126e0$export$7cafe8229f22dfd7","$b7c90650b3f126e0$export$7931cf9ae0965376","$b7c90650b3f126e0$export$1406d28fb2a7f1d3","$23f5314cb83d0665$var$formatTime","totalSeconds","minutes","Math","floor","toString","padStart","seconds","$23f5314cb83d0665$var$updatePracticeTimer","elapsed","Date","now","getMinutes","getSeconds","textContent","$23f5314cb83d0665$export$5985f5b4428bec55","limitSeconds","checkAnswersCallback","clearInterval","remainingSeconds","setInterval","alert","$23f5314cb83d0665$export$4d41f7386211339a","$859539450d12e8ee$export$578c9bc0c99a8ff","displayQuestionCallback","classList","add","remove","disabled","length","$859539450d12e8ee$export$17a82b04f64e1546","newIndex","Array","from","children","forEach","box","currentBox","scrollIntoView","behavior","block","$859539450d12e8ee$export$3bf2280bcf993d3e","indexToUpdate","questionBox","id","$859539450d12e8ee$export$6730ea2ae9ec998a","className","innerHTML","value","max","$859539450d12e8ee$export$7619b4851e6d7e59","resetQuizCallback","removeEventListener","addEventListener","$58d95d5e5894cd8c$export$f1ccc45a9664540b","e","file","target","files","reader","FileReader","onload","event","loadedData","JSON","parse","result","isArray","every","q","undefined","question","options","answer","explanation","min","parseInt","error","readAsText","$54b47fc030b7b21e$var$displayQuestionConcrete","index","$186f71895d6e255e$export$ffe5ba36e7eed945","questionDiv","createElement","dataset","optionsHTML","map","option","join","appendChild","radioButtons","querySelectorAll","radio","questionId","$186f71895d6e255e$export$27ed0ddec6ce687c","userAnswer","opt","parentElement","explanationDiv","style","display","color","$54b47fc030b7b21e$var$checkAnswersConcrete","$186f71895d6e255e$export$cae4508e5bd16cd1","correct","incorrect","unanswered","totalQuestionsAsked","percentage","round","input","$54b47fc030b7b21e$var$resetQuizConcrete","type","accept","onchange","click","isNaN","$186f71895d6e255e$export$846158ed34eece62","actualNumQuestions","newShuffledQuestions","sort","random","slice","clickedIndex","updateQuestionBoxStatusCallback","updateNavigationButtonsCallback"],"version":3,"file":"public.63c01d66.js.map"}